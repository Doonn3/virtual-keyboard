(()=>{"use strict";class t{static current=new t;#t=null;subscribe(t){this.#t=t}emit(t){this.#t(t)}}const e=t,a=["Backspace","Tab","Delete","CapsLock","Enter","ShiftLeft","ShiftRight","ControlLeft","ControlRight","MetaLeft","AltLeft","AltRight"],i=function(t){const{id:e,key:i,dataEng:n,dataRus:s}=t,d=e===a.find((t=>t===e))?"medium":"Space"===e?"large":"";return`\n    <div id="${e}" class="btn ${d}" data-key-eng="${n}" data-key-rus="${s}">\n        <span class="btn__key">${i}</span>\n    </div>\n    `},n=class{#e=["Backspace","Delete","Enter","Tab"];#a=["ShiftLeft","ShiftRight","CapsLock","ControlLeft","ControlRight","AltLeft","AltRight","MetaLeft","MetaRight"];constructor(t){this.input=t}execute(t){if(!(t instanceof KeyboardEvent)&&"object"!=typeof t)return;const{key:e,code:a}=t;if(this.#a.includes(a))return;const i=this.#e.find((t=>t===a));i?this.#i(i):this.#n(e)}#i(t){switch(t){case"Backspace":this.#s();break;case"Tab":this.#d();break;case"Delete":this.#r();break;case"Enter":this.#o()}}#u=null;#n(t){if(!(this.input instanceof HTMLTextAreaElement))return;this.#u=this.input.selectionStart;const e=this.input.value.slice(0,this.#u),a=this.input.value.slice(this.#u);this.input.value=e+t+a,this.input.setSelectionRange(this.#u+1,this.#u+1)}#o(){if(!(this.input instanceof HTMLTextAreaElement))return;const t=this.input.selectionStart,e=this.input.value.slice(0,t),a=this.input.value.slice(t);this.input.value=`${e}\n${a}`,this.input.setSelectionRange(t+1,t+1)}#s(){if(!(this.input instanceof HTMLTextAreaElement))return;const t=this.input.selectionStart,e=this.input.value.slice(0,t),a=this.input.value.slice(t);this.input.value=e.slice(0,-1)+a,this.input.setSelectionRange(t-1,t)}#d(){if(!(this.input instanceof HTMLTextAreaElement))return;const t=this.input.selectionStart,e=this.input.value.slice(0,t),a=this.input.value.slice(t);this.input.value=`${e}    ${a}`,this.input.setSelectionRange(t+4,t+4)}#r(){if(!(this.input instanceof HTMLTextAreaElement))return;const t=this.input.selectionStart,e=this.input.value.slice(0,t),a=this.input.value.slice(t);this.input.value=e+a.slice(1),this.input.setSelectionRange(t,t)}restoreCursorPosition(){this.input instanceof HTMLTextAreaElement&&(this.input.selectionStart=this.#u,this.input.selectionEnd=this.#u)}};document.body.insertAdjacentHTML("beforeend",'<div id="app"></div>');const s=document.querySelector("#app"),d=new class{#c;#h=!0;init(){const t=document.querySelector(".text-area");this.#c=new n(t),t.addEventListener("input",this.handlerTextArea),t.focus(),t.addEventListener("blur",(()=>{t.focus()})),e.current.subscribe(this.#l)}render(){return'<textarea class="text-area"></textarea>'}#l=t=>{this.#c instanceof n&&this.#c.execute(t)};handlerTextArea=t=>{this.#h||t instanceof InputEvent||this.#c instanceof n&&this.#c.execute(t)};#y=()=>{this.#h=!0};#g=()=>{this.#h=!1}};s.insertAdjacentHTML("beforeend",d.render()),d.init();const r=new class{#k=new class{#p=null;#E=[];#f={curr:"data-key-eng",switch(t){this.curr=`data-key-${t}`}};init(){this.#p=document.querySelector(".virtual-keyboard"),this.#E=[...document.querySelectorAll(".btn")],this.#p.addEventListener("mousedown",this.#R),this.#p.addEventListener("mouseup",this.#$)}render(){return`\n        <section class="virtual-keyboard">\n            <div class="virtual-keyboard__draw-row">\n            ${i({id:"Backquote",key:"`",dataEng:"`~",dataRus:"ёЁ"})}\n            ${i({id:"Digit1",key:"1",dataEng:"1!",dataRus:"1!"})}\n            ${i({id:"Digit2",key:"2",dataEng:"2@",dataRus:"2&quot;"})}\n            ${i({id:"Digit3",key:"3",dataEng:"3#",dataRus:"3№"})}\n            ${i({id:"Digit4",key:"4",dataEng:"4$",dataRus:"4;"})}\n            ${i({id:"Digit5",key:"5",dataEng:"5%",dataRus:"5%"})}\n            ${i({id:"Digit6",key:"6",dataEng:"6^",dataRus:"6:"})}\n            ${i({id:"Digit7",key:"7",dataEng:"7&",dataRus:"7?"})}\n            ${i({id:"Digit8",key:"8",dataEng:"8*",dataRus:"8*"})}\n            ${i({id:"Digit9",key:"9",dataEng:"9(",dataRus:"9("})}\n            ${i({id:"Digit0",key:"0",dataEng:"0)",dataRus:"0)"})}\n            ${i({id:"Minus",key:"-",dataEng:"-_",dataRus:"-_"})}\n            ${i({id:"Equal",key:"=",dataEng:"=+",dataRus:"=+"})}\n            ${i({id:"Backspace",key:"Backspace",dataEng:"Backspace",dataRus:"Backspace"})}\n            </div>\n\n            <div class="virtual-keyboard__draw-row">\n            ${i({id:"Tab",key:"Tab",dataEng:"Tab",dataRus:"Tab"})}\n            ${i({id:"KeyQ",key:"q",dataEng:"qQ",dataRus:"йЙ"})}\n            ${i({id:"KeyW",key:"w",dataEng:"wW",dataRus:"цЦ"})}\n            ${i({id:"KeyE",key:"e",dataEng:"eE",dataRus:"уУ"})}\n            ${i({id:"KeyR",key:"r",dataEng:"rR",dataRus:"кК"})}\n            ${i({id:"KeyT",key:"t",dataEng:"tT",dataRus:"еЕ"})}\n            ${i({id:"KeyY",key:"y",dataEng:"yY",dataRus:"нН"})}\n            ${i({id:"KeyU",key:"u",dataEng:"uU",dataRus:"гГ"})}\n            ${i({id:"KeyI",key:"i",dataEng:"iI",dataRus:"шШ"})}\n            ${i({id:"KeyO",key:"o",dataEng:"oO",dataRus:"щЩ"})}\n            ${i({id:"KeyP",key:"p",dataEng:"pP",dataRus:"зЗ"})}\n            ${i({id:"BracketLeft",key:"[",dataEng:"[{",dataRus:"хХ"})}\n            ${i({id:"BracketRight",key:"]",dataEng:"]}",dataRus:"ъЪ"})}\n            ${i({id:"Backslash",key:"\\",dataEng:"\\|",dataRus:"\\/"})}\n            ${i({id:"Delete",key:"Del",dataEng:"Delete",dataRus:"Delete"})}\n            </div>\n\n            <div class="virtual-keyboard__draw-row">\n            ${i({id:"CapsLock",key:"CapsLock",dataEng:"CapsLock",dataRus:"CapsLock"})}\n            ${i({id:"KeyA",key:"a",dataEng:"aA",dataRus:"фФ"})}\n            ${i({id:"KeyS",key:"s",dataEng:"sS",dataRus:"ыЫ"})}\n            ${i({id:"KeyD",key:"d",dataEng:"dD",dataRus:"вВ"})}\n            ${i({id:"KeyF",key:"f",dataEng:"fF",dataRus:"аА"})}\n            ${i({id:"KeyG",key:"g",dataEng:"gG",dataRus:"пП"})}\n            ${i({id:"KeyH",key:"h",dataEng:"hH",dataRus:"рР"})}\n            ${i({id:"KeyJ",key:"j",dataEng:"jJ",dataRus:"оО"})}\n            ${i({id:"KeyK",key:"k",dataEng:"kK",dataRus:"лЛ"})}\n            ${i({id:"KeyL",key:"l",dataEng:"lL",dataRus:"дД"})}\n            ${i({id:"Semicolon",key:";",dataEng:";:",dataRus:"жЖ"})}\n            ${i({id:"Quote",key:"&sbquo;",dataEng:"&sbquo;;&quot;",dataRus:"эЭ"})}\n            ${i({id:"Enter",key:"Enter",dataEng:"Enter",dataRus:"Enter"})}\n            </div>\n\n            <div class="virtual-keyboard__draw-row">\n            ${i({id:"ShiftLeft",key:"Shift",dataEng:"ShiftLeft",dataRus:"ShiftLeft"})}\n            ${i({id:"KeyZ",key:"z",dataEng:"zZ",dataRus:"яЯ"})}\n            ${i({id:"KeyX",key:"x",dataEng:"xX",dataRus:"чЧ"})}\n            ${i({id:"KeyC",key:"c",dataEng:"cC",dataRus:"сС"})}\n            ${i({id:"KeyV",key:"v",dataEng:"vV",dataRus:"мМ"})}\n            ${i({id:"KeyB",key:"b",dataEng:"bB",dataRus:"иИ"})}\n            ${i({id:"KeyN",key:"n",dataEng:"nN",dataRus:"тТ"})}\n            ${i({id:"KeyM",key:"m",dataEng:"mM",dataRus:"ьЬ"})}\n            ${i({id:"Comma",key:",",dataEng:",<",dataRus:"бБ"})}\n            ${i({id:"Period",key:".",dataEng:".>",dataRus:"юЮ"})}\n            ${i({id:"Slash",key:"/",dataEng:"/?",dataRus:".,"})}\n            ${i({id:"ArrowUp",key:"⬆",dataEng:"⬆",dataRus:"⬆"})}\n            ${i({id:"ShiftRight",key:"Shift",dataEng:"ShiftRight",dataRus:"ShiftRight"})}\n            </div>\n\n            <div class="virtual-keyboard__draw-row">\n            ${i({id:"ControlLeft",key:"Ctrl",dataEng:"Ctrl",dataRus:"Ctrl"})}\n            ${i({id:"MetaLeft",key:"Win",dataEng:"Win",dataRus:"Win"})}\n            ${i({id:"AltLeft",key:"Alt",dataEng:"Alt",dataRus:"Alt"})}\n            ${i({id:"Space",key:" ",dataEng:" ",dataRus:" "})}\n            ${i({id:"AltRight",key:"Alt",dataEng:"Alt",dataRus:"Alt"})}\n            ${i({id:"ArrowLeft",key:"⬅",dataEng:"⬅",dataRus:"⬅"})}\n            ${i({id:"ArrowDown",key:"⬇",dataEng:"⬇",dataRus:"⬇"})}\n            ${i({id:"ArrowRight",key:"⮕",dataEng:"⮕",dataRus:"⮕"})}\n            ${i({id:"ControlRight",key:"Ctrl",dataEng:"Ctrl",dataRus:"Ctrl"})}\n            </div>\n        </section>\n        `}#m=null;#L=!1;#R=t=>{const{target:a}=t,i=a.closest(".btn");if(null===i)return;this.#m=i;const n=i.getAttribute("id");"CapsLock"===n&&(this.#L=!this.#L,this.#L?this.upperCase():this.lowerCase()),"ShiftLeft"!==n&&"ShiftRight"!==n||!1===this.#L&&this.upperCase();const s=i.querySelector(".btn__key").textContent;this.#v(n),e.current.emit({code:n,key:s})};#$=()=>{if(null===this.#m||void 0===this.#m)return;const t=this.#m.getAttribute("id");"ShiftLeft"!==t&&"ShiftRight"!==t||!1===this.#L&&this.lowerCase(),"CapsLock"!==t&&this.#v(t),this.#m=null};downKey(t){this.#v(t)}upKey(t){"CapsLock"!==t&&this.#v(t)}#v(t){const e=this.#E.find((e=>e.id===t));e&&e.classList.toggle("pressed--button")}upperCase(){this.#E.forEach((t=>{if(this.#C(t.id))return;const e=t.getAttribute(`${this.#f.curr}`).split("");t.querySelector(".btn__key").textContent=e[1]}))}lowerCase(){this.#E.forEach((t=>{if(this.#C(t.id))return;const e=t.getAttribute(`${this.#f.curr}`).split("");t.querySelector(".btn__key").textContent=e[0]}))}changeLanguage(t){let e=t;void 0===t&&(e="eng"),"eng"!==t&&"rus"!==t&&(e="eng"),this.#f.switch(e),this.#E.forEach((t=>{if(this.#C(t.id))return;const a=t.getAttribute(`data-key-${e}`).split("");t.querySelector(".btn__key").textContent=a[0]}))}#C(t){return!!["Backspace","Tab","Delete","CapsLock","Enter","ShiftLeft","ShiftRight","ControlLeft","ControlRight","MetaLeft","AltLeft","AltRight","ArrowLeft","ArrowUp","ArrowDown","ArrowRight"].includes(t)}};#b={curr:localStorage.getItem("Language"),switch(){"eng"===this.curr?this.curr="rus":this.curr="eng"}};init(){this.#k.init(),this.#k.changeLanguage(this.#b.curr)}render(){return this.#k.render()}switchLanguage(){this.#b.switch(),this.#k.changeLanguage(this.#b.curr),localStorage.setItem("Language",this.#b.curr)}#w=!1;handlerDownKey(t){if(!(t instanceof KeyboardEvent))return;const{code:e}=t;t.shiftKey&&t.altKey&&this.switchLanguage(),t.shiftKey&&!1===this.#w&&this.#k.upperCase(),"CapsLock"===e&&(this.#w=!this.#w),this.#w?this.#k.upperCase():this.#w||t.shiftKey||this.#k.lowerCase(),this.#k.downKey(e)}handlerUpKey(t){if(!(t instanceof KeyboardEvent))return;const{code:e}=t;"CapsLock"!==e&&(!1===t.shiftKey&&!1===this.#w&&this.#k.lowerCase(),this.#k.upKey(e))}};s.insertAdjacentHTML("beforeend",r.render()),r.init(),s.insertAdjacentHTML("beforeend",`<p class="text">${"Клавиатура создана в операционной системе Windows\nДля переключения языка комбинация: Shift + alt или раскладка вашей операционной системы"}</>`);const o=["Tab","Shift","Alt","Meta"];let u=null;window.addEventListener("keydown",(t=>{t instanceof KeyboardEvent&&(o.includes(t.key)&&t.preventDefault(),d.handlerTextArea(t),u!==t.key&&(r.handlerDownKey(t),u=t.key))})),window.addEventListener("keyup",(t=>{t instanceof KeyboardEvent&&(r.handlerUpKey(t),u=null)})),r.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU8sQ0FBRUgsR0FBSSxTQUFVQyxJQUFLLElBQUtDLFFBQVMsS0FBTUMsUUFBUyx1QkFDekQsRUFBTyxDQUFFSCxHQUFJLFNBQVVDLElBQUssSUFBS0MsUUFBUyxLQUFNQyxRQUFTLHVCQUN6RCxFQUFPLENBQUVILEdBQUksU0FBVUMsSUFBSyxJQUFLQyxRQUFTLEtBQU1DLFFBQVMsdUJBQ3pELEVBQU8sQ0FBRUgsR0FBSSxRQUFTQyxJQUFLLElBQUtDLFFBQVMsS0FBTUMsUUFBUyx1QkFDeEQsRUFBTyxDQUFFSCxHQUFJLFFBQVNDLElBQUssSUFBS0MsUUFBUyxLQUFNQyxRQUFTLHVCQUN4RCxFQUFPLENBQ1BILEdBQUksWUFDSkMsSUFBSyxZQUNMQyxRQUFTLFlBQ1RDLFFBQVMsMEdBS1QsRUFBTyxDQUFFSCxHQUFJLE1BQU9DLElBQUssTUFBT0MsUUFBUyxNQUFPQyxRQUFTLHdCQUN6RCxFQUFPLENBQUVILEdBQUksT0FBUUMsSUFBSyxJQUFLQyxRQUFTLEtBQU1DLFFBQVMsdUJBQ3ZELEVBQU8sQ0FBRUgsR0FBSSxPQUFRQyxJQUFLLElBQUtDLFFBQVMsS0FBTUMsUUFBUyx1QkFDdkQsRUFBTyxDQUFFSCxHQUFJLE9BQVFDLElBQUssSUFBS0MsUUFBUyxLQUFNQyxRQUFTLHVCQUN2RCxFQUFPLENBQUVILEdBQUksT0FBUUMsSUFBSyxJQUFLQyxRQUFTLEtBQU1DLFFBQVMsdUJBQ3ZELEVBQU8sQ0FBRUgsR0FBSSxPQUFRQyxJQUFLLElBQUtDLFFBQVMsS0FBTUMsUUFBUyx1QkFDdkQsRUFBTyxDQUFFSCxHQUFJLE9BQVFDLElBQUssSUFBS0MsUUFBUyxLQUFNQyxRQUFTLHVCQUN2RCxFQUFPLENBQUVILEdBQUksT0FBUUMsSUFBSyxJQUFLQyxRQUFTLEtBQU1DLFFBQVMsdUJBQ3ZELEVBQU8sQ0FBRUgsR0FBSSxPQUFRQyxJQUFLLElBQUtDLFFBQVMsS0FBTUMsUUFBUyx1QkFDdkQsRUFBTyxDQUFFSCxHQUFJLE9BQVFDLElBQUssSUFBS0MsUUFBUyxLQUFNQyxRQUFTLHVCQUN2RCxFQUFPLENB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aUQsSUFBM0I1RSxNQUFLLEdBQ3JDQSxNQUFLLEVBQU15RCxZQUdiekQsTUFBSyxFQUFNNkQsTUFBTTVDLEdBQ25CLEdGcERGbUIsRUFBSUQsbUJBQW1CLFlBQWFZLEVBQVNILFVBQzdDRyxFQUFTUixPQUVUSCxFQUFJRCxtQkFDRixZSWpCTyxtQkprQkQsbUpBSVIsTUFBTTRDLEVBQVEsQ0FBQyxNQUFPLFFBQVMsTUFBTyxRQUV0QyxJQUFJQyxFQUFVLEtBaUJkQyxPQUFPeEMsaUJBQWlCLFdBaEJMSSxJQUNYQSxhQUFpQjdCLGdCQUNuQitELEVBQU03RCxTQUFTMkIsRUFBTXZDLE1BQU11QyxFQUFNcUMsaUJBQ3JDNUMsRUFBU0ksZ0JBQWdCRyxHQUNyQm1DLElBQVluQyxFQUFNdkMsTUFDdEJ5QyxFQUFTMkIsZUFBZTdCLEdBRXhCbUMsRUFBVW5DLEVBQU12QyxLQUFHLElBVXJCMkUsT0FBT3hDLGlCQUFpQixTQVBQSSxJQUNUQSxhQUFpQjdCLGdCQUN2QitCLEVBQVMrQixhQUFhakMsR0FDdEJtQyxFQUFVLEtBQUksSUFNaEJqQyxFQUFTUixNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlydHVhbC1rZXlib2FyZC8uL3NyYy9FdmVudHMvVmlydHVhbEtleWJvYXJkRXZlbnQuanMiLCJ3ZWJwYWNrOi8vdmlydHVhbC1rZXlib2FyZC8uL3NyYy9jb21wb25lbnRzL2tleWJvYXJkL2NvbXBvbmVudHMvYnV0dG9uLmpzIiwid2VicGFjazovL3ZpcnR1YWwta2V5Ym9hcmQvLi9zcmMvY29tcG9uZW50cy90ZXh0YXJlYS9Db21tYW5kL0Jhc2VDb21tYW5kLmpzIiwid2VicGFjazovL3ZpcnR1YWwta2V5Ym9hcmQvLi9zcmMvbWFpbi5qcyIsIndlYnBhY2s6Ly92aXJ0dWFsLWtleWJvYXJkLy4vc3JjL2NvbXBvbmVudHMvdGV4dGFyZWEvVGV4dEFyZWFJbnB1dC5qcyIsIndlYnBhY2s6Ly92aXJ0dWFsLWtleWJvYXJkLy4vc3JjL2NvbXBvbmVudHMva2V5Ym9hcmQvS2V5Qm9hcmRDb250cm9sbGVyLmpzIiwid2VicGFjazovL3ZpcnR1YWwta2V5Ym9hcmQvLi9zcmMvY29tcG9uZW50cy9rZXlib2FyZC9LZXlCb2FyZFZpZXcuanMiLCJ3ZWJwYWNrOi8vdmlydHVhbC1rZXlib2FyZC8uL3NyYy9jb21wb25lbnRzL3RpdGxlL1RpdGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFZpcnR1YWxLZXlib2FyZEV2ZW50IHtcclxuICBzdGF0aWMgY3VycmVudCA9IG5ldyBWaXJ0dWFsS2V5Ym9hcmRFdmVudCgpO1xyXG5cclxuICAjb3duU3ViID0gbnVsbDtcclxuXHJcbiAgc3Vic2NyaWJlKHN1Yikge1xyXG4gICAgdGhpcy4jb3duU3ViID0gc3ViO1xyXG4gIH1cclxuXHJcbiAgZW1pdChkYXRhKSB7XHJcbiAgICB0aGlzLiNvd25TdWIoZGF0YSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWaXJ0dWFsS2V5Ym9hcmRFdmVudDtcclxuIiwiaW1wb3J0ICcuL2J1dHRvbi5zY3NzJztcclxuXHJcbmNvbnN0IGNoZWNrID0gW1xyXG4gICdCYWNrc3BhY2UnLFxyXG4gICdUYWInLFxyXG4gICdEZWxldGUnLFxyXG4gICdDYXBzTG9jaycsXHJcbiAgJ0VudGVyJyxcclxuICAnU2hpZnRMZWZ0JyxcclxuICAnU2hpZnRSaWdodCcsXHJcbiAgJ0NvbnRyb2xMZWZ0JyxcclxuICAnQ29udHJvbFJpZ2h0JyxcclxuICAnTWV0YUxlZnQnLFxyXG4gICdBbHRMZWZ0JyxcclxuICAnQWx0UmlnaHQnLFxyXG5dO1xyXG5cclxuZnVuY3Rpb24gYnV0dG9uKGJ1dHRvblR5cGUpIHtcclxuICBjb25zdCB7IGlkLCBrZXksIGRhdGFFbmcsIGRhdGFSdXMgfSA9IGJ1dHRvblR5cGU7XHJcblxyXG4gIGNvbnN0IGNsYXNzTmFtZU1vZCA9XHJcbiAgICBpZCA9PT0gY2hlY2suZmluZCgoaXRlbSkgPT4gaXRlbSA9PT0gaWQpID8gJ21lZGl1bScgOiBpZCA9PT0gJ1NwYWNlJyA/ICdsYXJnZScgOiAnJztcclxuXHJcbiAgcmV0dXJuIGBcclxuICAgIDxkaXYgaWQ9XCIke2lkfVwiIGNsYXNzPVwiYnRuICR7Y2xhc3NOYW1lTW9kfVwiIGRhdGEta2V5LWVuZz1cIiR7ZGF0YUVuZ31cIiBkYXRhLWtleS1ydXM9XCIke2RhdGFSdXN9XCI+XHJcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJidG5fX2tleVwiPiR7a2V5fTwvc3Bhbj5cclxuICAgIDwvZGl2PlxyXG4gICAgYDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYnV0dG9uO1xyXG4iLCJjbGFzcyBCYXNlQ29tbWFuZCB7XHJcbiAgI21ldGhvZHMgPSBbJ0JhY2tzcGFjZScsICdEZWxldGUnLCAnRW50ZXInLCAnVGFiJ107XHJcblxyXG4gICNpZ25vcmVkID0gW1xyXG4gICAgJ1NoaWZ0TGVmdCcsXHJcbiAgICAnU2hpZnRSaWdodCcsXHJcbiAgICAnQ2Fwc0xvY2snLFxyXG4gICAgJ0NvbnRyb2xMZWZ0JyxcclxuICAgICdDb250cm9sUmlnaHQnLFxyXG4gICAgJ0FsdExlZnQnLFxyXG4gICAgJ0FsdFJpZ2h0JyxcclxuICAgICdNZXRhTGVmdCcsXHJcbiAgICAnTWV0YVJpZ2h0JyxcclxuICBdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihpbnB1dCkge1xyXG4gICAgdGhpcy5pbnB1dCA9IGlucHV0O1xyXG4gIH1cclxuXHJcbiAgZXhlY3V0ZShtZXRob2QpIHtcclxuICAgIGlmICghKG1ldGhvZCBpbnN0YW5jZW9mIEtleWJvYXJkRXZlbnQpICYmICEodHlwZW9mIG1ldGhvZCA9PT0gJ29iamVjdCcpKSByZXR1cm47XHJcbiAgICBjb25zdCB7IGtleSwgY29kZSB9ID0gbWV0aG9kO1xyXG4gICAgaWYgKHRoaXMuI2lnbm9yZWQuaW5jbHVkZXMoY29kZSkpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBmaW5kTWV0aG9kID0gdGhpcy4jbWV0aG9kcy5maW5kKChlbGVtKSA9PiBlbGVtID09PSBjb2RlKTtcclxuXHJcbiAgICBpZiAoZmluZE1ldGhvZCkge1xyXG4gICAgICB0aGlzLiNtYXRjaENvbW1hbmQoZmluZE1ldGhvZCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLiNjaGFyQWRkKGtleSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAjbWF0Y2hDb21tYW5kKGNvbW1hbmQpIHtcclxuICAgIHN3aXRjaCAoY29tbWFuZCkge1xyXG4gICAgICBjYXNlICdCYWNrc3BhY2UnOlxyXG4gICAgICAgIHRoaXMuI2JhY2tTcGFjZUNvbW1hbmQoKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnVGFiJzpcclxuICAgICAgICB0aGlzLiN0YWJDb21tYW5kKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ0RlbGV0ZSc6XHJcbiAgICAgICAgdGhpcy4jZGVsZXRlQ29tbWFuZCgpO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnRW50ZXInOlxyXG4gICAgICAgIHRoaXMuI2VudGVyQ29tbWFuZCgpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgI2N1cnNvclBvc2l0aW9uID0gbnVsbDtcclxuXHJcbiAgI2NoYXJBZGQoY2hhcikge1xyXG4gICAgaWYgKCEodGhpcy5pbnB1dCBpbnN0YW5jZW9mIEhUTUxUZXh0QXJlYUVsZW1lbnQpKSByZXR1cm47XHJcbiAgICB0aGlzLiNjdXJzb3JQb3NpdGlvbiA9IHRoaXMuaW5wdXQuc2VsZWN0aW9uU3RhcnQ7XHJcbiAgICBjb25zdCB0ZXh0QmVmb3JlQ3Vyc29yID0gdGhpcy5pbnB1dC52YWx1ZS5zbGljZSgwLCB0aGlzLiNjdXJzb3JQb3NpdGlvbik7XHJcbiAgICBjb25zdCB0ZXh0QWZ0ZXJDdXJzb3IgPSB0aGlzLmlucHV0LnZhbHVlLnNsaWNlKHRoaXMuI2N1cnNvclBvc2l0aW9uKTtcclxuICAgIHRoaXMuaW5wdXQudmFsdWUgPSB0ZXh0QmVmb3JlQ3Vyc29yICsgY2hhciArIHRleHRBZnRlckN1cnNvcjtcclxuICAgIHRoaXMuaW5wdXQuc2V0U2VsZWN0aW9uUmFuZ2UodGhpcy4jY3Vyc29yUG9zaXRpb24gKyAxLCB0aGlzLiNjdXJzb3JQb3NpdGlvbiArIDEpO1xyXG4gIH1cclxuXHJcbiAgI2VudGVyQ29tbWFuZCgpIHtcclxuICAgIGlmICghKHRoaXMuaW5wdXQgaW5zdGFuY2VvZiBIVE1MVGV4dEFyZWFFbGVtZW50KSkgcmV0dXJuO1xyXG4gICAgY29uc3QgY3Vyc29yUG9zaXRpb24gPSB0aGlzLmlucHV0LnNlbGVjdGlvblN0YXJ0O1xyXG4gICAgY29uc3QgdGV4dEJlZm9yZUN1cnNvciA9IHRoaXMuaW5wdXQudmFsdWUuc2xpY2UoMCwgY3Vyc29yUG9zaXRpb24pO1xyXG4gICAgY29uc3QgdGV4dEFmdGVyQ3Vyc29yID0gdGhpcy5pbnB1dC52YWx1ZS5zbGljZShjdXJzb3JQb3NpdGlvbik7XHJcbiAgICB0aGlzLmlucHV0LnZhbHVlID0gYCR7dGV4dEJlZm9yZUN1cnNvcn1cXG4ke3RleHRBZnRlckN1cnNvcn1gO1xyXG4gICAgdGhpcy5pbnB1dC5zZXRTZWxlY3Rpb25SYW5nZShjdXJzb3JQb3NpdGlvbiArIDEsIGN1cnNvclBvc2l0aW9uICsgMSk7XHJcbiAgfVxyXG5cclxuICAjYmFja1NwYWNlQ29tbWFuZCgpIHtcclxuICAgIGlmICghKHRoaXMuaW5wdXQgaW5zdGFuY2VvZiBIVE1MVGV4dEFyZWFFbGVtZW50KSkgcmV0dXJuO1xyXG4gICAgY29uc3QgY3Vyc29yUG9zaXRpb24gPSB0aGlzLmlucHV0LnNlbGVjdGlvblN0YXJ0O1xyXG4gICAgY29uc3QgdGV4dEJlZm9yZUN1cnNvciA9IHRoaXMuaW5wdXQudmFsdWUuc2xpY2UoMCwgY3Vyc29yUG9zaXRpb24pO1xyXG4gICAgY29uc3QgdGV4dEFmdGVyQ3Vyc29yID0gdGhpcy5pbnB1dC52YWx1ZS5zbGljZShjdXJzb3JQb3NpdGlvbik7XHJcbiAgICB0aGlzLmlucHV0LnZhbHVlID0gdGV4dEJlZm9yZUN1cnNvci5zbGljZSgwLCAtMSkgKyB0ZXh0QWZ0ZXJDdXJzb3I7XHJcbiAgICB0aGlzLmlucHV0LnNldFNlbGVjdGlvblJhbmdlKGN1cnNvclBvc2l0aW9uIC0gMSwgY3Vyc29yUG9zaXRpb24pO1xyXG4gIH1cclxuXHJcbiAgI3RhYkNvbW1hbmQoKSB7XHJcbiAgICBpZiAoISh0aGlzLmlucHV0IGluc3RhbmNlb2YgSFRNTFRleHRBcmVhRWxlbWVudCkpIHJldHVybjtcclxuICAgIGNvbnN0IGN1cnNvclBvc2l0aW9uID0gdGhpcy5pbnB1dC5zZWxlY3Rpb25TdGFydDtcclxuICAgIGNvbnN0IHRleHRCZWZvcmVDdXJzb3IgPSB0aGlzLmlucHV0LnZhbHVlLnNsaWNlKDAsIGN1cnNvclBvc2l0aW9uKTtcclxuICAgIGNvbnN0IHRleHRBZnRlckN1cnNvciA9IHRoaXMuaW5wdXQudmFsdWUuc2xpY2UoY3Vyc29yUG9zaXRpb24pO1xyXG4gICAgdGhpcy5pbnB1dC52YWx1ZSA9IGAke3RleHRCZWZvcmVDdXJzb3J9ICAgICR7dGV4dEFmdGVyQ3Vyc29yfWA7XHJcbiAgICB0aGlzLmlucHV0LnNldFNlbGVjdGlvblJhbmdlKGN1cnNvclBvc2l0aW9uICsgNCwgY3Vyc29yUG9zaXRpb24gKyA0KTtcclxuICB9XHJcblxyXG4gICNkZWxldGVDb21tYW5kKCkge1xyXG4gICAgaWYgKCEodGhpcy5pbnB1dCBpbnN0YW5jZW9mIEhUTUxUZXh0QXJlYUVsZW1lbnQpKSByZXR1cm47XHJcbiAgICBjb25zdCBjdXJzb3JQb3NpdGlvbiA9IHRoaXMuaW5wdXQuc2VsZWN0aW9uU3RhcnQ7XHJcbiAgICBjb25zdCB0ZXh0QmVmb3JlQ3Vyc29yID0gdGhpcy5pbnB1dC52YWx1ZS5zbGljZSgwLCBjdXJzb3JQb3NpdGlvbik7XHJcbiAgICBjb25zdCB0ZXh0QWZ0ZXJDdXJzb3IgPSB0aGlzLmlucHV0LnZhbHVlLnNsaWNlKGN1cnNvclBvc2l0aW9uKTtcclxuICAgIHRoaXMuaW5wdXQudmFsdWUgPSB0ZXh0QmVmb3JlQ3Vyc29yICsgdGV4dEFmdGVyQ3Vyc29yLnNsaWNlKDEpO1xyXG4gICAgdGhpcy5pbnB1dC5zZXRTZWxlY3Rpb25SYW5nZShjdXJzb3JQb3NpdGlvbiwgY3Vyc29yUG9zaXRpb24pO1xyXG4gIH1cclxuXHJcbiAgcmVzdG9yZUN1cnNvclBvc2l0aW9uKCkge1xyXG4gICAgaWYgKCEodGhpcy5pbnB1dCBpbnN0YW5jZW9mIEhUTUxUZXh0QXJlYUVsZW1lbnQpKSByZXR1cm47XHJcbiAgICB0aGlzLmlucHV0LnNlbGVjdGlvblN0YXJ0ID0gdGhpcy4jY3Vyc29yUG9zaXRpb247XHJcbiAgICB0aGlzLmlucHV0LnNlbGVjdGlvbkVuZCA9IHRoaXMuI2N1cnNvclBvc2l0aW9uO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQmFzZUNvbW1hbmQ7XHJcbiIsImltcG9ydCBLZXlCb2FyZENvbnRyb2xsZXIgZnJvbSAnLi9jb21wb25lbnRzL2tleWJvYXJkL0tleUJvYXJkQ29udHJvbGxlcic7XHJcbmltcG9ydCBUZXh0QXJlYUlucHV0IGZyb20gJy4vY29tcG9uZW50cy90ZXh0YXJlYS9UZXh0QXJlYUlucHV0JztcclxuaW1wb3J0IFRpdGxlIGZyb20gJy4vY29tcG9uZW50cy90aXRsZS9UaXRsZSc7XHJcbmltcG9ydCAnLi9tYWluLmVqcyc7XHJcbmltcG9ydCAnLi9tYWluLnNjc3MnO1xyXG5cclxuZG9jdW1lbnQuYm9keS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsICc8ZGl2IGlkPVwiYXBwXCI+PC9kaXY+Jyk7XHJcblxyXG5jb25zdCBhcHAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXBwJyk7XHJcbmV4cG9ydCBkZWZhdWx0IGFwcDtcclxuXHJcbmNvbnN0IHRleHRBcmVhID0gbmV3IFRleHRBcmVhSW5wdXQoKTtcclxuYXBwLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgdGV4dEFyZWEucmVuZGVyKCkpO1xyXG50ZXh0QXJlYS5pbml0KCk7XHJcblxyXG5jb25zdCBrZXlib2FyZCA9IG5ldyBLZXlCb2FyZENvbnRyb2xsZXIoKTtcclxuYXBwLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywga2V5Ym9hcmQucmVuZGVyKCkpO1xyXG5rZXlib2FyZC5pbml0KCk7XHJcblxyXG5hcHAuaW5zZXJ0QWRqYWNlbnRIVE1MKFxyXG4gICdiZWZvcmVlbmQnLFxyXG4gIFRpdGxlKGDQmtC70LDQstC40LDRgtGD0YDQsCDRgdC+0LfQtNCw0L3QsCDQsiDQvtC/0LXRgNCw0YbQuNC+0L3QvdC+0Lkg0YHQuNGB0YLQtdC80LUgV2luZG93c1xyXG7QlNC70Y8g0L/QtdGA0LXQutC70Y7Rh9C10L3QuNGPINGP0LfRi9C60LAg0LrQvtC80LHQuNC90LDRhtC40Y86IFNoaWZ0ICsgYWx0INC40LvQuCDRgNCw0YHQutC70LDQtNC60LAg0LLQsNGI0LXQuSDQvtC/0LXRgNCw0YbQuNC+0L3QvdC+0Lkg0YHQuNGB0YLQtdC80YtgKSxcclxuKTtcclxuXHJcbmNvbnN0IG1hdGNoID0gWydUYWInLCAnU2hpZnQnLCAnQWx0JywgJ01ldGEnXTtcclxuXHJcbmxldCB0ZW1wS2V5ID0gbnVsbDtcclxuY29uc3Qgb25LZXlEb3duID0gKGV2ZW50KSA9PiB7XHJcbiAgaWYgKCEoZXZlbnQgaW5zdGFuY2VvZiBLZXlib2FyZEV2ZW50KSkgcmV0dXJuO1xyXG4gIGlmIChtYXRjaC5pbmNsdWRlcyhldmVudC5rZXkpKSBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIHRleHRBcmVhLmhhbmRsZXJUZXh0QXJlYShldmVudCk7XHJcbiAgaWYgKHRlbXBLZXkgPT09IGV2ZW50LmtleSkgcmV0dXJuO1xyXG4gIGtleWJvYXJkLmhhbmRsZXJEb3duS2V5KGV2ZW50KTtcclxuXHJcbiAgdGVtcEtleSA9IGV2ZW50LmtleTtcclxufTtcclxuXHJcbmNvbnN0IG9uS2V5VXAgPSAoZXZlbnQpID0+IHtcclxuICBpZiAoIShldmVudCBpbnN0YW5jZW9mIEtleWJvYXJkRXZlbnQpKSByZXR1cm47XHJcbiAga2V5Ym9hcmQuaGFuZGxlclVwS2V5KGV2ZW50KTtcclxuICB0ZW1wS2V5ID0gbnVsbDtcclxufTtcclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25LZXlEb3duKTtcclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgb25LZXlVcCk7XHJcblxyXG5rZXlib2FyZC5pbml0KCk7XHJcbiIsImltcG9ydCBWaXJ0dWFsS2V5Ym9hcmRFdmVudCBmcm9tICcuLi8uLi9FdmVudHMvVmlydHVhbEtleWJvYXJkRXZlbnQnO1xyXG5pbXBvcnQgQmFzZUNvbW1hbmQgZnJvbSAnLi9Db21tYW5kL0Jhc2VDb21tYW5kJztcclxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xyXG5cclxuY2xhc3MgVGV4dEFyZWFJbnB1dCB7XHJcbiAgI2NvbW1hbmQ7XHJcblxyXG4gICNpc0ZvY3VzID0gdHJ1ZTtcclxuXHJcbiAgaW5pdCgpIHtcclxuICAgIGNvbnN0IHJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGV4dC1hcmVhJyk7XHJcbiAgICB0aGlzLiNjb21tYW5kID0gbmV3IEJhc2VDb21tYW5kKHJvb3QpO1xyXG4gICAgcm9vdC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHRoaXMuaGFuZGxlclRleHRBcmVhKTtcclxuICAgIC8vIHJvb3QuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLiNoYW5kbGVyRm9jdXMpO1xyXG4gICAgLy8gcm9vdC5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIHRoaXMuI2hhbmRsZXJGb2N1c291dCk7XHJcbiAgICByb290LmZvY3VzKCk7XHJcbiAgICByb290LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoKSA9PiB7XHJcbiAgICAgIHJvb3QuZm9jdXMoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIFZpcnR1YWxLZXlib2FyZEV2ZW50LmN1cnJlbnQuc3Vic2NyaWJlKHRoaXMuI2hhbmRsZXJWaXJ0dWFsS2V5Ym9hcmQpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuICc8dGV4dGFyZWEgY2xhc3M9XCJ0ZXh0LWFyZWFcIj48L3RleHRhcmVhPic7XHJcbiAgfVxyXG5cclxuICAjaGFuZGxlclZpcnR1YWxLZXlib2FyZCA9IChkYXRhKSA9PiB7XHJcbiAgICBpZiAodGhpcy4jY29tbWFuZCBpbnN0YW5jZW9mIEJhc2VDb21tYW5kKSB7XHJcbiAgICAgIHRoaXMuI2NvbW1hbmQuZXhlY3V0ZShkYXRhKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBoYW5kbGVyVGV4dEFyZWEgPSAoZXZlbnQpID0+IHtcclxuICAgIGlmICh0aGlzLiNpc0ZvY3VzKSByZXR1cm47XHJcbiAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBJbnB1dEV2ZW50KSByZXR1cm47XHJcblxyXG4gICAgaWYgKHRoaXMuI2NvbW1hbmQgaW5zdGFuY2VvZiBCYXNlQ29tbWFuZCkge1xyXG4gICAgICB0aGlzLiNjb21tYW5kLmV4ZWN1dGUoZXZlbnQpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICNoYW5kbGVyRm9jdXMgPSAoKSA9PiB7XHJcbiAgICB0aGlzLiNpc0ZvY3VzID0gdHJ1ZTtcclxuICB9O1xyXG5cclxuICAjaGFuZGxlckZvY3Vzb3V0ID0gKCkgPT4ge1xyXG4gICAgdGhpcy4jaXNGb2N1cyA9IGZhbHNlO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRleHRBcmVhSW5wdXQ7XHJcbiIsImltcG9ydCBLZXlCb2FyZFZpZXcgZnJvbSAnLi9LZXlCb2FyZFZpZXcnO1xyXG5cclxuY2xhc3MgS2V5Qm9hcmRDb250cm9sbGVyIHtcclxuICAjdmlldyA9IG5ldyBLZXlCb2FyZFZpZXcoKTtcclxuXHJcbiAgI2xhbmdTdGF0ZSA9IHtcclxuICAgIGN1cnI6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdMYW5ndWFnZScpLFxyXG4gICAgc3dpdGNoKCkge1xyXG4gICAgICBpZiAodGhpcy5jdXJyID09PSAnZW5nJykge1xyXG4gICAgICAgIHRoaXMuY3VyciA9ICdydXMnO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuY3VyciA9ICdlbmcnO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gIH07XHJcblxyXG4gIGluaXQoKSB7XHJcbiAgICB0aGlzLiN2aWV3LmluaXQoKTtcclxuICAgIHRoaXMuI3ZpZXcuY2hhbmdlTGFuZ3VhZ2UodGhpcy4jbGFuZ1N0YXRlLmN1cnIpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuI3ZpZXcucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICBzd2l0Y2hMYW5ndWFnZSgpIHtcclxuICAgIHRoaXMuI2xhbmdTdGF0ZS5zd2l0Y2goKTtcclxuICAgIHRoaXMuI3ZpZXcuY2hhbmdlTGFuZ3VhZ2UodGhpcy4jbGFuZ1N0YXRlLmN1cnIpO1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ0xhbmd1YWdlJywgdGhpcy4jbGFuZ1N0YXRlLmN1cnIpO1xyXG4gIH1cclxuXHJcbiAgI2lzQ2Fwc0xvY2tBY3RpdmUgPSBmYWxzZTtcclxuXHJcbiAgaGFuZGxlckRvd25LZXkoa2V5SW5mbykge1xyXG4gICAgaWYgKCEoa2V5SW5mbyBpbnN0YW5jZW9mIEtleWJvYXJkRXZlbnQpKSByZXR1cm47XHJcbiAgICBjb25zdCB7IGNvZGUgfSA9IGtleUluZm87XHJcblxyXG4gICAgaWYgKGtleUluZm8uc2hpZnRLZXkgJiYga2V5SW5mby5hbHRLZXkpIHtcclxuICAgICAgdGhpcy5zd2l0Y2hMYW5ndWFnZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChrZXlJbmZvLnNoaWZ0S2V5ICYmIHRoaXMuI2lzQ2Fwc0xvY2tBY3RpdmUgPT09IGZhbHNlKSB7XHJcbiAgICAgIHRoaXMuI3ZpZXcudXBwZXJDYXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvZGUgPT09ICdDYXBzTG9jaycpIHtcclxuICAgICAgdGhpcy4jaXNDYXBzTG9ja0FjdGl2ZSA9ICF0aGlzLiNpc0NhcHNMb2NrQWN0aXZlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLiNpc0NhcHNMb2NrQWN0aXZlKSB7XHJcbiAgICAgIHRoaXMuI3ZpZXcudXBwZXJDYXNlKCk7XHJcbiAgICB9IGVsc2UgaWYgKCF0aGlzLiNpc0NhcHNMb2NrQWN0aXZlICYmICFrZXlJbmZvLnNoaWZ0S2V5KSB7XHJcbiAgICAgIHRoaXMuI3ZpZXcubG93ZXJDYXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy4jdmlldy5kb3duS2V5KGNvZGUpO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlclVwS2V5KGtleUluZm8pIHtcclxuICAgIGlmICghKGtleUluZm8gaW5zdGFuY2VvZiBLZXlib2FyZEV2ZW50KSkgcmV0dXJuO1xyXG4gICAgY29uc3QgeyBjb2RlIH0gPSBrZXlJbmZvO1xyXG4gICAgaWYgKGNvZGUgPT09ICdDYXBzTG9jaycpIHJldHVybjtcclxuXHJcbiAgICBpZiAoa2V5SW5mby5zaGlmdEtleSA9PT0gZmFsc2UgJiYgdGhpcy4jaXNDYXBzTG9ja0FjdGl2ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgdGhpcy4jdmlldy5sb3dlckNhc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLiN2aWV3LnVwS2V5KGNvZGUpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgS2V5Qm9hcmRDb250cm9sbGVyO1xyXG4iLCJpbXBvcnQgVmlydHVhbEtleWJvYXJkRXZlbnQgZnJvbSAnLi4vLi4vRXZlbnRzL1ZpcnR1YWxLZXlib2FyZEV2ZW50JztcclxuaW1wb3J0IGJ1dHRvbiBmcm9tICcuL2NvbXBvbmVudHMvYnV0dG9uJztcclxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xyXG5cclxuY2xhc3MgS2V5Qm9hcmRWaWV3IHtcclxuICAjcm9vdCA9IG51bGw7XHJcblxyXG4gICNidXR0b25zID0gW107XHJcblxyXG4gICNkYXRhS2V5U3RhdGUgPSB7XHJcbiAgICBjdXJyOiAnZGF0YS1rZXktZW5nJyxcclxuICAgIHN3aXRjaChsYW5nKSB7XHJcbiAgICAgIHRoaXMuY3VyciA9IGBkYXRhLWtleS0ke2xhbmd9YDtcclxuICAgIH0sXHJcbiAgfTtcclxuXHJcbiAgaW5pdCgpIHtcclxuICAgIHRoaXMuI3Jvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudmlydHVhbC1rZXlib2FyZCcpO1xyXG4gICAgdGhpcy4jYnV0dG9ucyA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYnRuJyldO1xyXG5cclxuICAgIHRoaXMuI3Jvb3QuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy4jaGFuZGxlckNsaWNrRG93bik7XHJcbiAgICB0aGlzLiNyb290LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLiNoYW5kbGVyQ2xpY2tVcCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gYFxyXG4gICAgICAgIDxzZWN0aW9uIGNsYXNzPVwidmlydHVhbC1rZXlib2FyZFwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmlydHVhbC1rZXlib2FyZF9fZHJhdy1yb3dcIj5cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ0JhY2txdW90ZScsIGtleTogJ2AnLCBkYXRhRW5nOiAnYH4nLCBkYXRhUnVzOiAn0ZHQgScgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHsgaWQ6ICdEaWdpdDEnLCBrZXk6ICcxJywgZGF0YUVuZzogJzEhJywgZGF0YVJ1czogJzEhJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ0RpZ2l0MicsIGtleTogJzInLCBkYXRhRW5nOiAnMkAnLCBkYXRhUnVzOiAnMiZxdW90OycgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHsgaWQ6ICdEaWdpdDMnLCBrZXk6ICczJywgZGF0YUVuZzogJzMjJywgZGF0YVJ1czogJzPihJYnIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnRGlnaXQ0Jywga2V5OiAnNCcsIGRhdGFFbmc6ICc0JCcsIGRhdGFSdXM6ICc0OycgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHsgaWQ6ICdEaWdpdDUnLCBrZXk6ICc1JywgZGF0YUVuZzogJzUlJywgZGF0YVJ1czogJzUlJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ0RpZ2l0NicsIGtleTogJzYnLCBkYXRhRW5nOiAnNl4nLCBkYXRhUnVzOiAnNjonIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnRGlnaXQ3Jywga2V5OiAnNycsIGRhdGFFbmc6ICc3JicsIGRhdGFSdXM6ICc3PycgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHsgaWQ6ICdEaWdpdDgnLCBrZXk6ICc4JywgZGF0YUVuZzogJzgqJywgZGF0YVJ1czogJzgqJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ0RpZ2l0OScsIGtleTogJzknLCBkYXRhRW5nOiAnOSgnLCBkYXRhUnVzOiAnOSgnIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnRGlnaXQwJywga2V5OiAnMCcsIGRhdGFFbmc6ICcwKScsIGRhdGFSdXM6ICcwKScgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHsgaWQ6ICdNaW51cycsIGtleTogJy0nLCBkYXRhRW5nOiAnLV8nLCBkYXRhUnVzOiAnLV8nIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnRXF1YWwnLCBrZXk6ICc9JywgZGF0YUVuZzogJz0rJywgZGF0YVJ1czogJz0rJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oe1xyXG4gICAgICAgICAgICAgIGlkOiAnQmFja3NwYWNlJyxcclxuICAgICAgICAgICAgICBrZXk6ICdCYWNrc3BhY2UnLFxyXG4gICAgICAgICAgICAgIGRhdGFFbmc6ICdCYWNrc3BhY2UnLFxyXG4gICAgICAgICAgICAgIGRhdGFSdXM6ICdCYWNrc3BhY2UnLFxyXG4gICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmlydHVhbC1rZXlib2FyZF9fZHJhdy1yb3dcIj5cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ1RhYicsIGtleTogJ1RhYicsIGRhdGFFbmc6ICdUYWInLCBkYXRhUnVzOiAnVGFiJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ0tleVEnLCBrZXk6ICdxJywgZGF0YUVuZzogJ3FRJywgZGF0YVJ1czogJ9C50JknIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnS2V5VycsIGtleTogJ3cnLCBkYXRhRW5nOiAnd1cnLCBkYXRhUnVzOiAn0YbQpicgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHsgaWQ6ICdLZXlFJywga2V5OiAnZScsIGRhdGFFbmc6ICdlRScsIGRhdGFSdXM6ICfRg9CjJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ0tleVInLCBrZXk6ICdyJywgZGF0YUVuZzogJ3JSJywgZGF0YVJ1czogJ9C60JonIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnS2V5VCcsIGtleTogJ3QnLCBkYXRhRW5nOiAndFQnLCBkYXRhUnVzOiAn0LXQlScgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHsgaWQ6ICdLZXlZJywga2V5OiAneScsIGRhdGFFbmc6ICd5WScsIGRhdGFSdXM6ICfQvdCdJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ0tleVUnLCBrZXk6ICd1JywgZGF0YUVuZzogJ3VVJywgZGF0YVJ1czogJ9Cz0JMnIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnS2V5SScsIGtleTogJ2knLCBkYXRhRW5nOiAnaUknLCBkYXRhUnVzOiAn0YjQqCcgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHsgaWQ6ICdLZXlPJywga2V5OiAnbycsIGRhdGFFbmc6ICdvTycsIGRhdGFSdXM6ICfRidCpJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ0tleVAnLCBrZXk6ICdwJywgZGF0YUVuZzogJ3BQJywgZGF0YVJ1czogJ9C30JcnIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnQnJhY2tldExlZnQnLCBrZXk6ICdbJywgZGF0YUVuZzogJ1t7JywgZGF0YVJ1czogJ9GF0KUnIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnQnJhY2tldFJpZ2h0Jywga2V5OiAnXScsIGRhdGFFbmc6ICddfScsIGRhdGFSdXM6ICfRitCqJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ0JhY2tzbGFzaCcsIGtleTogJ1xcXFwnLCBkYXRhRW5nOiAnXFxcXHwnLCBkYXRhUnVzOiAnXFxcXC8nIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnRGVsZXRlJywga2V5OiAnRGVsJywgZGF0YUVuZzogJ0RlbGV0ZScsIGRhdGFSdXM6ICdEZWxldGUnIH0pfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2aXJ0dWFsLWtleWJvYXJkX19kcmF3LXJvd1wiPlxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnQ2Fwc0xvY2snLCBrZXk6ICdDYXBzTG9jaycsIGRhdGFFbmc6ICdDYXBzTG9jaycsIGRhdGFSdXM6ICdDYXBzTG9jaycgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHsgaWQ6ICdLZXlBJywga2V5OiAnYScsIGRhdGFFbmc6ICdhQScsIGRhdGFSdXM6ICfRhNCkJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ0tleVMnLCBrZXk6ICdzJywgZGF0YUVuZzogJ3NTJywgZGF0YVJ1czogJ9GL0KsnIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnS2V5RCcsIGtleTogJ2QnLCBkYXRhRW5nOiAnZEQnLCBkYXRhUnVzOiAn0LLQkicgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHsgaWQ6ICdLZXlGJywga2V5OiAnZicsIGRhdGFFbmc6ICdmRicsIGRhdGFSdXM6ICfQsNCQJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ0tleUcnLCBrZXk6ICdnJywgZGF0YUVuZzogJ2dHJywgZGF0YVJ1czogJ9C/0J8nIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnS2V5SCcsIGtleTogJ2gnLCBkYXRhRW5nOiAnaEgnLCBkYXRhUnVzOiAn0YDQoCcgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHsgaWQ6ICdLZXlKJywga2V5OiAnaicsIGRhdGFFbmc6ICdqSicsIGRhdGFSdXM6ICfQvtCeJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ0tleUsnLCBrZXk6ICdrJywgZGF0YUVuZzogJ2tLJywgZGF0YVJ1czogJ9C70JsnIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnS2V5TCcsIGtleTogJ2wnLCBkYXRhRW5nOiAnbEwnLCBkYXRhUnVzOiAn0LTQlCcgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHsgaWQ6ICdTZW1pY29sb24nLCBrZXk6ICc7JywgZGF0YUVuZzogJzs6JywgZGF0YVJ1czogJ9C20JYnIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnUXVvdGUnLCBrZXk6ICcmc2JxdW87JywgZGF0YUVuZzogJyZzYnF1bzs7JnF1b3Q7JywgZGF0YVJ1czogJ9GN0K0nIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnRW50ZXInLCBrZXk6ICdFbnRlcicsIGRhdGFFbmc6ICdFbnRlcicsIGRhdGFSdXM6ICdFbnRlcicgfSl9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZpcnR1YWwta2V5Ym9hcmRfX2RyYXctcm93XCI+XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHtcclxuICAgICAgICAgICAgICBpZDogJ1NoaWZ0TGVmdCcsXHJcbiAgICAgICAgICAgICAga2V5OiAnU2hpZnQnLFxyXG4gICAgICAgICAgICAgIGRhdGFFbmc6ICdTaGlmdExlZnQnLFxyXG4gICAgICAgICAgICAgIGRhdGFSdXM6ICdTaGlmdExlZnQnLFxyXG4gICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ0tleVonLCBrZXk6ICd6JywgZGF0YUVuZzogJ3paJywgZGF0YVJ1czogJ9GP0K8nIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnS2V5WCcsIGtleTogJ3gnLCBkYXRhRW5nOiAneFgnLCBkYXRhUnVzOiAn0YfQpycgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHsgaWQ6ICdLZXlDJywga2V5OiAnYycsIGRhdGFFbmc6ICdjQycsIGRhdGFSdXM6ICfRgdChJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ0tleVYnLCBrZXk6ICd2JywgZGF0YUVuZzogJ3ZWJywgZGF0YVJ1czogJ9C80JwnIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnS2V5QicsIGtleTogJ2InLCBkYXRhRW5nOiAnYkInLCBkYXRhUnVzOiAn0LjQmCcgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHsgaWQ6ICdLZXlOJywga2V5OiAnbicsIGRhdGFFbmc6ICduTicsIGRhdGFSdXM6ICfRgtCiJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ0tleU0nLCBrZXk6ICdtJywgZGF0YUVuZzogJ21NJywgZGF0YVJ1czogJ9GM0KwnIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnQ29tbWEnLCBrZXk6ICcsJywgZGF0YUVuZzogJyw8JywgZGF0YVJ1czogJ9Cx0JEnIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnUGVyaW9kJywga2V5OiAnLicsIGRhdGFFbmc6ICcuPicsIGRhdGFSdXM6ICfRjtCuJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ1NsYXNoJywga2V5OiAnLycsIGRhdGFFbmc6ICcvPycsIGRhdGFSdXM6ICcuLCcgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHtcclxuICAgICAgICAgICAgICBpZDogJ0Fycm93VXAnLFxyXG4gICAgICAgICAgICAgIGtleTogJ+KshicsXHJcbiAgICAgICAgICAgICAgZGF0YUVuZzogJ+KshicsXHJcbiAgICAgICAgICAgICAgZGF0YVJ1czogJ+KshicsXHJcbiAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7XHJcbiAgICAgICAgICAgICAgaWQ6ICdTaGlmdFJpZ2h0JyxcclxuICAgICAgICAgICAgICBrZXk6ICdTaGlmdCcsXHJcbiAgICAgICAgICAgICAgZGF0YUVuZzogJ1NoaWZ0UmlnaHQnLFxyXG4gICAgICAgICAgICAgIGRhdGFSdXM6ICdTaGlmdFJpZ2h0JyxcclxuICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZpcnR1YWwta2V5Ym9hcmRfX2RyYXctcm93XCI+XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHsgaWQ6ICdDb250cm9sTGVmdCcsIGtleTogJ0N0cmwnLCBkYXRhRW5nOiAnQ3RybCcsIGRhdGFSdXM6ICdDdHJsJyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ01ldGFMZWZ0Jywga2V5OiAnV2luJywgZGF0YUVuZzogJ1dpbicsIGRhdGFSdXM6ICdXaW4nIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnQWx0TGVmdCcsIGtleTogJ0FsdCcsIGRhdGFFbmc6ICdBbHQnLCBkYXRhUnVzOiAnQWx0JyB9KX1cclxuICAgICAgICAgICAgJHtidXR0b24oeyBpZDogJ1NwYWNlJywga2V5OiAnICcsIGRhdGFFbmc6ICcgJywgZGF0YVJ1czogJyAnIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnQWx0UmlnaHQnLCBrZXk6ICdBbHQnLCBkYXRhRW5nOiAnQWx0JywgZGF0YVJ1czogJ0FsdCcgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHtcclxuICAgICAgICAgICAgICBpZDogJ0Fycm93TGVmdCcsXHJcbiAgICAgICAgICAgICAga2V5OiAn4qyFJyxcclxuICAgICAgICAgICAgICBkYXRhRW5nOiAn4qyFJyxcclxuICAgICAgICAgICAgICBkYXRhUnVzOiAn4qyFJyxcclxuICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHtcclxuICAgICAgICAgICAgICBpZDogJ0Fycm93RG93bicsXHJcbiAgICAgICAgICAgICAga2V5OiAn4qyHJyxcclxuICAgICAgICAgICAgICBkYXRhRW5nOiAn4qyHJyxcclxuICAgICAgICAgICAgICBkYXRhUnVzOiAn4qyHJyxcclxuICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICR7YnV0dG9uKHtcclxuICAgICAgICAgICAgICBpZDogJ0Fycm93UmlnaHQnLFxyXG4gICAgICAgICAgICAgIGtleTogJ+KulScsXHJcbiAgICAgICAgICAgICAgZGF0YUVuZzogJ+KulScsXHJcbiAgICAgICAgICAgICAgZGF0YVJ1czogJ+KulScsXHJcbiAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICAke2J1dHRvbih7IGlkOiAnQ29udHJvbFJpZ2h0Jywga2V5OiAnQ3RybCcsIGRhdGFFbmc6ICdDdHJsJywgZGF0YVJ1czogJ0N0cmwnIH0pfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgYDtcclxuICB9XHJcblxyXG4gICN0ZW1wQnRuID0gbnVsbDtcclxuXHJcbiAgI2lzQ2Fwc0xvY2sgPSBmYWxzZTtcclxuXHJcbiAgI2hhbmRsZXJDbGlja0Rvd24gPSAoZXZlbnQpID0+IHtcclxuICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSBldmVudDtcclxuICAgIGNvbnN0IGJ0biA9IHRhcmdldC5jbG9zZXN0KCcuYnRuJyk7XHJcbiAgICBpZiAoYnRuID09PSBudWxsKSByZXR1cm47XHJcbiAgICB0aGlzLiN0ZW1wQnRuID0gYnRuO1xyXG4gICAgY29uc3QgY29kZSA9IGJ0bi5nZXRBdHRyaWJ1dGUoJ2lkJyk7XHJcblxyXG4gICAgaWYgKGNvZGUgPT09ICdDYXBzTG9jaycpIHtcclxuICAgICAgdGhpcy4jaXNDYXBzTG9jayA9ICF0aGlzLiNpc0NhcHNMb2NrO1xyXG4gICAgICBpZiAodGhpcy4jaXNDYXBzTG9jaykge1xyXG4gICAgICAgIHRoaXMudXBwZXJDYXNlKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5sb3dlckNhc2UoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb2RlID09PSAnU2hpZnRMZWZ0JyB8fCBjb2RlID09PSAnU2hpZnRSaWdodCcpIHtcclxuICAgICAgaWYgKHRoaXMuI2lzQ2Fwc0xvY2sgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy51cHBlckNhc2UoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGtleSA9IGJ0bi5xdWVyeVNlbGVjdG9yKCcuYnRuX19rZXknKS50ZXh0Q29udGVudDtcclxuICAgIHRoaXMuI2tleUlsbHVtaW5hdGlvbihjb2RlKTtcclxuICAgIFZpcnR1YWxLZXlib2FyZEV2ZW50LmN1cnJlbnQuZW1pdCh7IGNvZGUsIGtleSB9KTtcclxuICB9O1xyXG5cclxuICAjaGFuZGxlckNsaWNrVXAgPSAoKSA9PiB7XHJcbiAgICBpZiAodGhpcy4jdGVtcEJ0biA9PT0gbnVsbCB8fCB0aGlzLiN0ZW1wQnRuID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuICAgIGNvbnN0IGNvZGUgPSB0aGlzLiN0ZW1wQnRuLmdldEF0dHJpYnV0ZSgnaWQnKTtcclxuICAgIGlmIChjb2RlID09PSAnU2hpZnRMZWZ0JyB8fCBjb2RlID09PSAnU2hpZnRSaWdodCcpIHtcclxuICAgICAgaWYgKHRoaXMuI2lzQ2Fwc0xvY2sgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5sb3dlckNhc2UoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGNvZGUgIT09ICdDYXBzTG9jaycpIHtcclxuICAgICAgdGhpcy4ja2V5SWxsdW1pbmF0aW9uKGNvZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuI3RlbXBCdG4gPSBudWxsO1xyXG4gIH07XHJcblxyXG4gIGRvd25LZXkoa2V5KSB7XHJcbiAgICB0aGlzLiNrZXlJbGx1bWluYXRpb24oa2V5KTtcclxuICB9XHJcblxyXG4gIHVwS2V5KGtleSkge1xyXG4gICAgaWYgKGtleSA9PT0gJ0NhcHNMb2NrJykgcmV0dXJuO1xyXG4gICAgdGhpcy4ja2V5SWxsdW1pbmF0aW9uKGtleSk7XHJcbiAgfVxyXG5cclxuICAja2V5SWxsdW1pbmF0aW9uKGtleSkge1xyXG4gICAgY29uc3QgZmluZEJ0biA9IHRoaXMuI2J1dHRvbnMuZmluZCgoYnRuKSA9PiBidG4uaWQgPT09IGtleSk7XHJcblxyXG4gICAgaWYgKGZpbmRCdG4pIHtcclxuICAgICAgZmluZEJ0bi5jbGFzc0xpc3QudG9nZ2xlKCdwcmVzc2VkLS1idXR0b24nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwcGVyQ2FzZSgpIHtcclxuICAgIHRoaXMuI2J1dHRvbnMuZm9yRWFjaCgoYnRuKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLiNtYXRjaChidG4uaWQpKSByZXR1cm47XHJcbiAgICAgIGNvbnN0IGF0dHJpYiA9IGJ0bi5nZXRBdHRyaWJ1dGUoYCR7dGhpcy4jZGF0YUtleVN0YXRlLmN1cnJ9YCk7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhdHRyaWIuc3BsaXQoJycpO1xyXG4gICAgICBjb25zdCBrZXkgPSBidG4ucXVlcnlTZWxlY3RvcignLmJ0bl9fa2V5Jyk7XHJcbiAgICAgIGtleS50ZXh0Q29udGVudCA9IGRhdGFbMV07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGxvd2VyQ2FzZSgpIHtcclxuICAgIHRoaXMuI2J1dHRvbnMuZm9yRWFjaCgoYnRuKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLiNtYXRjaChidG4uaWQpKSByZXR1cm47XHJcbiAgICAgIGNvbnN0IGF0dHJpYiA9IGJ0bi5nZXRBdHRyaWJ1dGUoYCR7dGhpcy4jZGF0YUtleVN0YXRlLmN1cnJ9YCk7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhdHRyaWIuc3BsaXQoJycpO1xyXG4gICAgICBjb25zdCBrZXkgPSBidG4ucXVlcnlTZWxlY3RvcignLmJ0bl9fa2V5Jyk7XHJcbiAgICAgIGtleS50ZXh0Q29udGVudCA9IGRhdGFbMF07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNoYW5nZUxhbmd1YWdlKGxhbmcpIHtcclxuICAgIGxldCBsYSA9IGxhbmc7XHJcbiAgICBpZiAobGFuZyA9PT0gdW5kZWZpbmVkKSBsYSA9ICdlbmcnO1xyXG4gICAgaWYgKGxhbmcgIT09ICdlbmcnICYmIGxhbmcgIT09ICdydXMnKSBsYSA9ICdlbmcnO1xyXG4gICAgdGhpcy4jZGF0YUtleVN0YXRlLnN3aXRjaChsYSk7XHJcblxyXG4gICAgdGhpcy4jYnV0dG9ucy5mb3JFYWNoKChidG4pID0+IHtcclxuICAgICAgaWYgKHRoaXMuI21hdGNoKGJ0bi5pZCkpIHJldHVybjtcclxuICAgICAgY29uc3QgYXR0cmliID0gYnRuLmdldEF0dHJpYnV0ZShgZGF0YS1rZXktJHtsYX1gKTtcclxuICAgICAgY29uc3QgZGF0YSA9IGF0dHJpYi5zcGxpdCgnJyk7XHJcbiAgICAgIGNvbnN0IGtleSA9IGJ0bi5xdWVyeVNlbGVjdG9yKCcuYnRuX19rZXknKTtcclxuICAgICAga2V5LnRleHRDb250ZW50ID0gZGF0YVswXTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgI21hdGNoKHN0cikge1xyXG4gICAgY29uc3QgYXJyID0gW1xyXG4gICAgICAnQmFja3NwYWNlJyxcclxuICAgICAgJ1RhYicsXHJcbiAgICAgICdEZWxldGUnLFxyXG4gICAgICAnQ2Fwc0xvY2snLFxyXG4gICAgICAnRW50ZXInLFxyXG4gICAgICAnU2hpZnRMZWZ0JyxcclxuICAgICAgJ1NoaWZ0UmlnaHQnLFxyXG4gICAgICAnQ29udHJvbExlZnQnLFxyXG4gICAgICAnQ29udHJvbFJpZ2h0JyxcclxuICAgICAgJ01ldGFMZWZ0JyxcclxuICAgICAgJ0FsdExlZnQnLFxyXG4gICAgICAnQWx0UmlnaHQnLFxyXG4gICAgICAnQXJyb3dMZWZ0JyxcclxuICAgICAgJ0Fycm93VXAnLFxyXG4gICAgICAnQXJyb3dEb3duJyxcclxuICAgICAgJ0Fycm93UmlnaHQnLFxyXG4gICAgXTtcclxuICAgIGlmIChhcnIuaW5jbHVkZXMoc3RyKSkgcmV0dXJuIHRydWU7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBLZXlCb2FyZFZpZXc7XHJcbiIsImltcG9ydCAnLi9zdHlsZS5zY3NzJztcclxuXHJcbmZ1bmN0aW9uIFRpdGxlKHRleHQpIHtcclxuICByZXR1cm4gYDxwIGNsYXNzPVwidGV4dFwiPiR7dGV4dH08Lz5gO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUaXRsZTtcclxuIl0sIm5hbWVzIjpbIlZpcnR1YWxLZXlib2FyZEV2ZW50Iiwic3RhdGljIiwic3Vic2NyaWJlIiwic3ViIiwidGhpcyIsImVtaXQiLCJkYXRhIiwiY2hlY2siLCJidXR0b25UeXBlIiwiaWQiLCJrZXkiLCJkYXRhRW5nIiwiZGF0YVJ1cyIsImNsYXNzTmFtZU1vZCIsImZpbmQiLCJpdGVtIiwiY29uc3RydWN0b3IiLCJpbnB1dCIsImV4ZWN1dGUiLCJtZXRob2QiLCJLZXlib2FyZEV2ZW50IiwiY29kZSIsImluY2x1ZGVzIiwiZmluZE1ldGhvZCIsImVsZW0iLCJjb21tYW5kIiwiY2hhciIsIkhUTUxUZXh0QXJlYUVsZW1lbnQiLCJzZWxlY3Rpb25TdGFydCIsInRleHRCZWZvcmVDdXJzb3IiLCJ2YWx1ZSIsInNsaWNlIiwidGV4dEFmdGVyQ3Vyc29yIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJjdXJzb3JQb3NpdGlvbiIsInJlc3RvcmVDdXJzb3JQb3NpdGlvbiIsInNlbGVjdGlvbkVuZCIsImRvY3VtZW50IiwiYm9keSIsImluc2VydEFkamFjZW50SFRNTCIsImFwcCIsInF1ZXJ5U2VsZWN0b3IiLCJ0ZXh0QXJlYSIsImluaXQiLCJyb290IiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZXJUZXh0QXJlYSIsImZvY3VzIiwicmVuZGVyIiwiZXZlbnQiLCJJbnB1dEV2ZW50Iiwia2V5Ym9hcmQiLCJjdXJyIiwic3dpdGNoIiwibGFuZyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0YXJnZXQiLCJidG4iLCJjbG9zZXN0IiwiZ2V0QXR0cmlidXRlIiwidXBwZXJDYXNlIiwibG93ZXJDYXNlIiwidGV4dENvbnRlbnQiLCJ1bmRlZmluZWQiLCJkb3duS2V5IiwidXBLZXkiLCJmaW5kQnRuIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiZm9yRWFjaCIsInNwbGl0IiwiY2hhbmdlTGFuZ3VhZ2UiLCJsYSIsInN0ciIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzd2l0Y2hMYW5ndWFnZSIsInNldEl0ZW0iLCJoYW5kbGVyRG93bktleSIsImtleUluZm8iLCJzaGlmdEtleSIsImFsdEtleSIsImhhbmRsZXJVcEtleSIsIm1hdGNoIiwidGVtcEtleSIsIndpbmRvdyIsInByZXZlbnREZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==